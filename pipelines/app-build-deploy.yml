version: '1.0'
kind: pipeline
metadata:
  name: ioc/app-build-deploy
  description: App build and deploy pipeline
  project: ioc
spec:
  variables:
    - key: IMAGE_TAG
      value: 1.0.0
      encrypted: false
    - key: IMAGE_NAME
      value: "ubi8-extra"
  runtimeEnvironment:
    name: k8s-runtime
    cpu: 2000m
    memory: 2000Mi
  steps:
    clone:
      title: Cloning main repository...
      type: git-clone
      repo: 'pnminh/codefresh'
      revision: 'master'
      git: github
    set_build_secrets:
      image: quay.io/pnminh232/ubi8-extra:1.0.0
      commands:
        - oc config use-context "acm-client"
        - |
          # set build envs from secrets
          SECRET_NAME="codefresh-ioc"
          NAMESPACE="codefresh"
          oc get secret "$SECRET_NAME" -n "$NAMESPACE" -o json | jq -r '.data | to_entries[] | "BUILD_SECRET_\(.key)=\(.value|@base64d)"' >> ${{CF_VOLUME_PATH}}/env_vars_to_export
    static_code_analysis:
      title: Sonar scan
      image: sonarsource/sonar-scanner-cli:5.0.1
      working_directory: ${{clone}}
      commands:
        -  SONAR_TOKEN=$BUILD_SECRET_SONAR_TOKEN sonar-scanner
    build:
      title: Build phase
      image: registry.access.redhat.com/ubi8/nodejs-16:1-161
      working_directory: ${{clone}}/apps/todo-ui
      commands:
        - npm ci
        - npm run test
        - npm run build
    package:
      title: Package app image
      image: 'quay.io/pnminh232/ubi8-extra:1.0.0'
      working_directory: '${{clone}}'
      commands:
        - oc config use-context "acm-client"
        - helm upgrade --install todo-ui-build helm-charts/build-app -n app-dev --wait
        - oc start-build todo-ui-build --from-dir apps/todo-ui/build -n app-dev --wait
    deploy-to-dev:
      title: Deploy to dev
      image: quay.io/pnminh232/ubi8-extra:1.0.0
      working_directory: '${{clone}}'
      commands:
        - oc config use-context "acm-client"
        - export BLUE_STACK_CANDIDATE=todo-ui-`date +'%Y-%m-%d-%H-%M-%S'` && echo "BLUE_STACK_CANDIDATE=$BLUE_STACK_CANDIDATE" >> ${{CF_VOLUME_PATH}}/env_vars_to_export
        - helm upgrade --install $BLUE_STACK_CANDIDATE helm-charts/deploy-app -n app-dev --wait
    integration-test:
      title: Integration tests
      image: cypress/base:20.13.0
      working_directory: '${{clone}}/apps/todo-ui'
      commands:
        - npx cypress install
        - CYPRESS_BASE_URL="https://${BLUE_STACK_CANDIDATE}-app-dev.apps.acm-client.gj1x.p1.openshiftapps.com" npx cypress run
    switch-stack:
      title: Switch stack from blue to green
      image: quay.io/pnminh232/ubi8-extra:1.0.0
      working_directory: '${{clone}}'
      commands:
        - |-
          oc config use-context "acm-client"
          if ! oc get route todo-ui-bg -n app-dev &> /dev/null; then
            echo "Route does not exist"
            echo "Label bg-stack=blue to $BLUE_STACK_CANDIDATE"
            oc label svc/$BLUE_STACK_CANDIDATE bg-stack=blue  -n app-dev
            echo "create bg route with blue stack"
            helm upgrade --install todo-ui helm-charts/blue-green-deployment --set route.blueStack=$BLUE_STACK_CANDIDATE -n app-dev --wait
          else
            echo "Route exists"
            echo "Label bg-stack=oldBlue to old stack"
            route_info=$(oc get route todo-ui-bg -n app-dev -o json)
            old_blue_service_name=$(echo $route_info  | jq -r ".spec.to.name")
            # only keep the latest 
            release_to_be_deleted=$(echo $route_info  | jq -r ".spec.alternateBackends[0].name")
            oc label svc/$old_blue_service_name  -n app-dev bg-stack=oldBlue --overwrite
            oc label svc/$BLUE_STACK_CANDIDATE  -n app-dev bg-stack=blue
            helm upgrade --install todo-ui helm-charts/blue-green-deployment --set route.blueStack=$BLUE_STACK_CANDIDATE --set route.oldBlueStack=$old_blue_service_name -n app-dev --wait
            if [ -n "$release_to_be_deleted" ] && [ "$release_to_be_deleted" != "nil" ]; then
              echo "Deleting unused release"
              helm delete $release_to_be_deleted -n app-dev
            fi
          fi 
        - |-
          echo "if integration test not successful:"
          echo "delete BLUE_STACK_CANDIDATE stack"
          echo "fails the pipeline"
    promote-image-to-stage:
      title: Promote image to registry-stage
      image: registry.access.redhat.com/ubi9/skopeo:9.4-6
      commands:
        - skopeo login --username $BUILD_SECRET_REGISTRY_USERNAME  --password $BUILD_SECRET_REGISTRY_PASSWORD quay.io/${BUILD_SECRET_REGISTRY_USERNAME}/registry-dev
        - skopeo login --username $BUILD_SECRET_REGISTRY_USERNAME  --password $BUILD_SECRET_REGISTRY_PASSWORD quay.io/${BUILD_SECRET_REGISTRY_USERNAME}/registry-stage  
        - skopeo copy docker://quay.io/pnminh232/registry-dev/todo-ui:1.0.0 docker://quay.io/pnminh232/registry-stage/todo-ui:1.0.0     
    deploy-to-stage:
      title: Deploy to stage cluster
      image: quay.io/pnminh232/ubi8-extra:1.0.0
      working_directory: '${{clone}}'
      commands:
        - oc config use-context "acm-client"
        - helm upgrade --install todo-ui helm-charts/deploy-app --set image.repository="quay.io/pnminh232/registry-stage/todo-ui" -n app-stage --wait
    integration-test-stage:
      title: Integration tests
      image: quay.io/pnminh232/ubi8-extra:1.0.0
      commands:
        - echo "deploy to dev-green stack"
    switch-stack-stage:
      title: Switch stack from blue to green
      image: quay.io/pnminh232/ubi8-extra:1.0.0
      commands:
        - |-
          echo "if integration test successful:"
          echo "Mark current blue stack to old-blue"
          echo "Update label from green stack to blue"
          echo "add 100% weight to blue stack and 0% to old-blue stack"
        - |-
          echo "if integration test successful:"
          echo "delete green stack"
          echo "fails the pipeline"
    promote-image-to-prod:
      title: Promote image to registry-prod
      image: registry.access.redhat.com/ubi9/skopeo:9.4-6
      commands:
        - skopeo login --username $BUILD_SECRET_REGISTRY_USERNAME  --password $BUILD_SECRET_REGISTRY_PASSWORD quay.io/${BUILD_SECRET_REGISTRY_USERNAME}/registry-stage
        - skopeo login --username $BUILD_SECRET_REGISTRY_USERNAME  --password $BUILD_SECRET_REGISTRY_PASSWORD quay.io/${BUILD_SECRET_REGISTRY_USERNAME}/registry-prod  
        - skopeo copy docker://quay.io/pnminh232/registry-stage/todo-ui:1.0.0 docker://quay.io/pnminh232/registry-prod/todo-ui:1.0.0  
    deploy-to-prod:
      title: Deploy to prod cluster
      image: quay.io/pnminh232/ubi8-extra:1.0.0
      working_directory: '${{clone}}'
      commands:
        - oc config use-context "acm-client"
        - helm upgrade --install todo-ui helm-charts/deploy-app --set image.repository="quay.io/pnminh232/registry-prod/todo-ui" -n app-prod --wait
    validation-test-prod:
      title: Integration tests
      image: quay.io/pnminh232/ubi8-extra:1.0.0
      commands:
        - echo "deploy to dev-green stack"
    switch-stack-prod:
      title: Switch stack from blue to green
      image: quay.io/pnminh232/ubi8-extra:1.0.0
      commands:
        - |-
          echo "if integration test successful:"
          echo "Mark current blue stack to old-blue"
          echo "Update label from green stack to blue"
          echo "add 100% weight to blue stack and 0% to old-blue stack"
        - |-
          echo "if integration test successful:"
          echo "delete green stack"
          echo "fails the pipeline"